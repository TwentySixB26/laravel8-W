PEMBAHASAN : 

strip_tags()
digunakan untuk menghapus semua tag HTML dan PHP dari sebuah string. Ini berguna jika Anda ingin membersihkan 
input pengguna dari tag HTML yang tidak diinginkan, terutama untuk mencegah masalah keamanan seperti 
Cross-Site Scripting (XSS).








====================================================================================================================


Validasi form create 

sebelum mengirim data ke database diharuskan melakukan validasi terlebih dahulu agar data aman,caranya :
- buka file dashboardPostController dan masuk ke method store dengan menambahkan code ini,jika ada 
code yang sebelumnya hapus saja :
public function store(Request $request) {
        $validatedData = $request->validate([
            'title' => 'required|max:255', 
            'slug' => 'required|unique:posts',
            'category_id' => 'required',
            'body' => 'required'
        ]) ; 
}




==========================================================================================================================



menampilkan pesan eror 
pesan eror akan muncul ketika user tidak mengisi form yang sudah disediakan. 


- buka file create.blade.php, isikan dengan code berikut 
masukan ini ke dalam class pada input,agar ketika data tidak diisi border berwarna merah :
@error('title') is-invalid @enderror

buat tag baru dibawah input agar dapat muncul pesanya 
@error('title') 
     <div id="" class="invalid-feedback">
             {{ $message }}
     </div>
@enderror 

dan ini contoh fulll:
<div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <input type="text" class="form-control @error('title') is-invalid @enderror" id="title" name="title">
        @error('title') 
                <div id="" class="invalid-feedback">
                    {{ $message }}
                </div>
        @enderror 
</div>

berikan di setiap input yang ada 



- dan ini pada trixi code tambahkan code ini sesudah label :
@error('body')
      <p class="text-danger">{{ $message }}</p>
@enderror



==========================================================================================================================



menampilkan data lama 

jika user mengisi judul dan slug dan mengklik submit tapi lupa mengisikan body maka data yg sudah di ketik di judul dan slug akan 
melakukan reset, jadi user harus mengisikan ulang dan itu akan ditanggani agar ketika user sudah mengisi form 
maka data yg sebelumnya diisi sudah ada tanpa mengetik ulang,caranya : 


- buka file create.blade.php dan tambahkan code ini didalam input judul dan slug :
value="{{ old('title') }}




- untuk category, berikan pengkondisian pada option nya dan ini full code nya  :
<div class="mb-3">
    <label for="category" class="form-label">Category</label>
    <select class="form-select" name="category_id">
          @foreach( $categories as $category )
                @if(old('category_id') == $category->id)
                        <option value="{{ $category->id }}" selected>{{ $category->name }}</option>
                @else 
                        <option value="{{ $category->id }}">{{ $category->name }}</option>
                @endif
          @endforeach
    </select>        
</div>




- pada body seperti ini :
<div class="mb-3">
            <label for="body" class="form-label">Body</label>
            @error('body')
                <p class="text-danger">{{ $message }}</p>
            @enderror
            <input id="body" type="hidden" name="body" value="{{ old('body') }}">
            <trix-editor input="body"></trix-editor>
</div>



==============================================================================================================================


menyimpan data ke tabel post 


- buka file dashboardPostController dan menambahkan data category_id dan excerpt, karena pada sebelumnya belum dibuat : 
simpan code ini di paling atas : 
use Illuminate\Support\Str;


- tambahkan code ini diluar $validatedData :
$validatedData['user_id'] = Auth::user()->id ; 
$validatedData['excerpt'] = Str::limit(strip_tags($request->body) , 100);

full code :
public function store(Request $request)
    {
        $validatedData = $request->validate([
            'title' => 'required|max:255', 
            'slug' => 'required|unique:posts',
            'category_id' => 'required',
            'body' => 'required'
        ]) ; 

        $validatedData['user_id'] = Auth::user()->id ; 
        $validatedData['excerpt'] = Str::limit(strip_tags($request->body) , 100);

        Post::create($validatedData) ; 
        return redirect('/dashboard/posts')->with('success', 'post telah ditambahkan!') ;

    }



- insert data ke database :
Post::create($validatedData) ; 


- redirect kehalaman lain jika succes :
return redirect('/dashboard/posts')->with('success', 'post telah ditambahkan!') ;


===========================================================================================================

menampilkan pesan sukses 

- berikan code ini pada index.blade.php yang ada di folder views dashboard :
@if(session()->has('success'))
            <div class="alert alert-success" role="alert">
                {{ session('success') }}
            </div>
        @endif
































